<?php

namespace LiviuVoica\BoilerplateMVC\Core;

use LiviuVoica\BoilerplateMVC\Utils\LogSystem;
use Exception;
use PDO;

class SQLiteORM
{
    private const LOG_FILE_NAME = 'db_sqlite_log';
    private LogSystem $log;
    private PDO $pdo;

    public function __construct(PDO $connection)
    {
        $this->log = new LogSystem();
        $this->pdo = $connection;
    }

    /**
     * Checks if a table exists in the database.
     * @param string $tableName The name of the table to check.
     * @return bool True if the table exists, otherwise false.
     */
    public function doesTableExist(string $tableName): bool
    {
        try {
            $sql = "SELECT name FROM sqlite_master WHERE type='table' AND name=:tableName";
            $stmt = $this->pdo->prepare($sql);
            $stmt->bindParam(':tableName', $tableName, PDO::PARAM_STR);
            $stmt->execute();

            return (bool) $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (Exception $e) {
            $this->log->handleLog(
                LogSystem::ERROR_LEVEL,
                [
                    'message' => "Error checking if table exists: {$tableName}.",
                    'db_error' => $e->getMessage(),
                ],
                self::LOG_FILE_NAME
            );

            return false;
        }
    }

    /**
     * Creates a table in the database.
     * @param string $createTableSql The SQL statement to create the table.
     * @param array $indexes An array of SQL statements to create indexes.
     * @return bool True if the table was created successfully, otherwise false.
     */
    public function createTable(string $sql, array $indexes = []): bool
    {
        try {
            $this->pdo->exec($sql);
            foreach ($indexes as $indexSql) {
                $this->pdo->exec($indexSql);
            }

            return true;
        } catch (Exception $e) {
            $this->log->handleLog(
                LogSystem::ERROR_LEVEL,
                [
                    'message' => 'Error creating the table.',
                    'sql' => $sql,
                    'error_message' => $e->getMessage(),
                ],
                self::LOG_FILE_NAME
            );

            return false;
        }
    }

    /**
     * Delete the table.
     * @param string $tableName The name of the table to delete.
     * @return bool True if the table was deleted successfully, otherwise false.
     */
    public function dropTable(string $tableName): bool
    {
        try {
            $sql = "DROP TABLE IF EXISTS {$tableName}";
            $this->pdo->exec($sql);

            return true;
        } catch (Exception $e) {
            $this->log->handleLog(
                LogSystem::ERROR_LEVEL,
                [
                    'message' => "Error dropping table '{$tableName}'.",
                    'error_message' => $e->getMessage(),
                ],
                self::LOG_FILE_NAME
            );

            return false;
        }
    }

    /**
     * Retrieves the column names of the specified table.
     * @param string $tableName The name of the table to fetch columns from.
     * @return array|null Returns an array of column names or null if an error occurs.
     */
    public function getColumns(string $tableName): ?array
    {
        try {
            $query = "PRAGMA table_info({$tableName})";
            $stmt = $this->pdo->prepare($query);
            $stmt->execute();
            $columns = $stmt->fetchAll(PDO::FETCH_ASSOC);

            return array_map(fn($column) => $column['name'], $columns);
        } catch (Exception $e) {
            $this->log->handleLog(
                LogSystem::ERROR_LEVEL,
                [
                    'message' => "Error retrieving columns from table: {$tableName}. Please check the log file: " . self::LOG_FILE_NAME . ' for more details.',
                    'db_error' => $e->getMessage(),
                ],
                self::LOG_FILE_NAME
            );

            return null;
        }
    }

    /**
     * Retrieves the column names and their data types of the specified table.
     * @param string $tableName The name of the table to fetch column types from.
     * @return array|null Returns an associative array with column names as keys and their data types as values, or null if an error occurs.
     */
    public function getColumnTypes(string $tableName): ?array
    {
        try {
            $query = "PRAGMA table_info({$tableName})";
            $stmt = $this->pdo->prepare($query);
            $stmt->execute();

            $columns = $stmt->fetchAll(PDO::FETCH_ASSOC);
            $columnTypes = [];
            foreach ($columns as $column) {
                $columnTypes[$column['name']] = $column['type'];
            }

            return $columnTypes;
        } catch (Exception $e) {
            $this->log->handleLog(
                LogSystem::ERROR_LEVEL,
                [
                    'message' => "Error retrieving column types from table: {$tableName}. Please check the log file: " . self::LOG_FILE_NAME . ' for more details.',
                    'db_error' => $e->getMessage(),
                ],
                self::LOG_FILE_NAME
            );

            return null;
        }
    }

    /**
     * Retrieves all records from the specified table.
     * @param string $tableName The name of the table to fetch data from.
     * @return array|null Returns an array of records or null if an error occurs.
     */
    public function all(string $tableName): ?array
    {
        try {
            $query = "SELECT * FROM {$tableName}";
            $stmt = $this->pdo->prepare($query);
            $stmt->execute();

            return $stmt->fetchAll();
        } catch (Exception $e) {
            $this->log->handleLog(
                LogSystem::ERROR_LEVEL,
                [
                    'message' => "Error retrieving records from the table: {$tableName}. Please check the log file: " . self::LOG_FILE_NAME . ' for more details.',
                    'db_error' => $e->getMessage(),
                ],
                self::LOG_FILE_NAME
            );

            return null;
        }
    }

    /**
     * Retrieves a single record by its ID from the specified table.
     * @param string $tableName The name of the table to fetch data from.
     * @param int $id The ID of the record to retrieve.
     * @return array|null Returns the record as an associative array, or null if not found or an error occurs.
     */
    public function fetch(string $tableName, int $id): ?array
    {
        try {
            $stmt = $this->pdo->prepare("SELECT * FROM {$tableName} WHERE id = :id");
            $stmt->bindParam(':id', $id, PDO::PARAM_INT);
            $stmt->execute();

            return $stmt->fetch();
        } catch (Exception $e) {
            $this->log->handleLog(
                LogSystem::ERROR_LEVEL,
                [
                    'message' => "Error retrieving the record by ID from the table: {$tableName}. Please check the log file: " . self::LOG_FILE_NAME . ' for more details.',
                    'db_error' => $e->getMessage(),
                ],
                self::LOG_FILE_NAME
            );

            return null;
        }
    }

    /**
     * Inserts a new record into the specified table.
     * @param string $tableName The name of the table to insert data into.
     * @param array $payload The data to insert as an associative array.
     * @return bool Returns true if the insertion was successful, false otherwise.
     */
    public function save(string $tableName, array $payload): int|bool
    {
        try {
            $columns = implode(", ", array_keys($payload));
            $placeholders = ":" . implode(", :", array_keys($payload));

            $sql = "INSERT INTO {$tableName} ({$columns}) VALUES ({$placeholders})";
            $stmt = $this->pdo->prepare($sql);

            foreach ($payload as $key => $value) {
                $stmt->bindValue(":{$key}", $value);
            }

            $stmt->execute();

            return $stmt->rowCount() > 0 ? $this->pdo->lastInsertId() : false;
        } catch (Exception $e) {
            $this->log->handleLog(
                LogSystem::ERROR_LEVEL,
                [
                    'message' => "Error inserting record into table: {$tableName}. Please check the log file: " . self::LOG_FILE_NAME . ' for more details.',
                    'db_error' => $e->getMessage(),
                ],
                self::LOG_FILE_NAME
            );

            return false;
        }
    }

    /**
     * Updates an existing record in the specified table based on the given ID and payload.
     * @param string $tableName The name of the table to update data in.
     * @param int $id The ID of the record to update.
     * @param array $payload The data to update as an associative array.
     * @return bool Returns true if the update was successful, false otherwise.
     */
    public function update(string $tableName, int $id, array $payload): bool
    {
        try {
            $setClause = [];
            foreach ($payload as $column => $value) {
                $setClause[] = "{$column} = :{$column}";
            }
            $setClause = implode(", ", $setClause);
            $sql = "UPDATE {$tableName} SET {$setClause} WHERE id = :id";
            $stmt = $this->pdo->prepare($sql);

            foreach ($payload as $column => $value) {
                $stmt->bindValue(":{$column}", $value);
            }

            $stmt->bindValue(":id", $id, PDO::PARAM_INT);
            $stmt->execute();

            return $stmt->rowCount() > 0 ? true : false;
        } catch (Exception $e) {
            $this->log->handleLog(
                LogSystem::ERROR_LEVEL,
                [
                    'message' => "Error updating record in table: {$tableName}. Please check the log file: " . self::LOG_FILE_NAME . ' for more details.',
                    'db_error' => $e->getMessage(),
                ],
                self::LOG_FILE_NAME
            );

            return false;
        }
    }

    /**
     * Deletes a record from the specified table by ID.
     * @param string $tableName The name of the table to delete from.
     * @param int $id The ID of the record to delete.
     * @return bool Returns true if the record was deleted successfully, false otherwise.
     */
    public function delete(string $tableName, int $id): bool
    {
        try {
            $sql = "DELETE FROM {$tableName} WHERE id = :id";
            $stmt = $this->pdo->prepare($sql);
            $stmt->bindValue(":id", $id, PDO::PARAM_INT);
            $stmt->execute();

            return $stmt->rowCount() > 0 ? true : false;
        } catch (Exception $e) {
            $this->log->handleLog(
                LogSystem::ERROR_LEVEL,
                [
                    'message' => "Error deleting record from table: {$tableName}. Please check the log file: " . self::LOG_FILE_NAME . ' for more details.',
                    'db_error' => $e->getMessage(),
                ],
                self::LOG_FILE_NAME
            );

            return false;
        }
    }
}
